#lang racket
;este archivo será el main con todas las funciones obligatorias, despues procederé a
;distribuir los tda a su tda correspondiente
;Nombre:Isidora Oyanedel
;Profesor:Gonzalo Martínez
;Laboratorio n1 Paradigmas de programación

#|Funcion 1 System - constructor
DOMINIO: string
RECORRIDO: system (conformado por nombre sistema, drive y usuario/s)
DESCRIPCION: se ingresa un string en la funcion devolviendo un system
             conformado por una lista de elementos que complementan el system
RECURSION: no.
|#

(define (system string)
  (if(is-string string)
     (make-system string null null null null null) ;el primer elemento es el nombre, siguiente drive, sig usuario
     #f))

#|FUNCION 2 RUN
DOMINIO: System X Command (funcion =command)
RECORRIDO: system
DESCRIPCION: Función que permite ejecutar un comando (función)
sobre un sistema. Toda acción realizada con run relativa a creación de archivos,
carpetas, renombrar, copiar, mover, eliminar, debe dejar un registro de la fecha de
modificación, además de verificar los permisos del recurso que será alterado|#

(define (run system command) ;se aplica una funcion en la lista system por ejemplo add-rive
  (command system))


#|FUNCION 3 ADD-DRIVE
DOMINIO: system x/dominio del primer lambda
         letter(char) x name(string) x capacity(int) /este se refiere a el dominio de la currificacion
RECORRIDO: system
DESCRIPCION: Función que permite añadir una unidad a unsistema. La letra de la unidad es única.
RECURSION: no
|#
(define add-drive
  (lambda(system)
    (lambda (letter name capacity);info del drive
      (if(and (member letter (map car(get-system-drive system)))(integer? capacity)(is-string name))
         (make-system(get-system-name system) ;lo mantiene
                     (get-system-drive system) 
                     (get-system-usuarios system)
                     (get-system-usuario-conectado system)
                     (get-system-drive-seleccionado system)
                     (get-system-ruta system))
         
         (make-system (get-system-name system)
                      (cons(make-drive letter name capacity) ;;make-drive= lista que recibe 3 cosas, y le agrega algo adelante de 3 cosas
                           (get-system-drive system)) ;cadr de la lista system, system =lista
                      (get-system-usuarios system)
                      (get-system-usuario-conectado system)
                      (get-system-drive-seleccionado system)
                      (get-system-ruta system))))))
